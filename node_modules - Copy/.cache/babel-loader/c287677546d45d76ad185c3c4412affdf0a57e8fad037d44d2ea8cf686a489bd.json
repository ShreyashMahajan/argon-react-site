{"ast":null,"code":"import _slicedToArray from \"C:/Shreyash/Projects/Coupon site/argon-dashboard-react-master/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _taggedTemplateLiteral from \"C:/Shreyash/Projects/Coupon site/argon-dashboard-react-master/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";\nvar _jsxFileName = \"C:\\\\Shreyash\\\\Projects\\\\Coupon site\\\\argon-dashboard-react-master\\\\src\\\\components\\\\QrUploader\\\\qrUploader.jsx\",\n  _templateObject,\n  _templateObject2,\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar StyledFileUploader = styled.label(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n\\tdisplay: block;\\n\\tborder: 1px solid #4caf50;\\n\\tdisplay: inline-block;\\n\\tpadding: 0.5rem 1rem;\\n\\tfont-size: 1rem;\\n\\tcursor: pointer;\\n\\tcolor: #4caf50;\\n\\ttransition: all 0.3s ease-in-out;\\n\\t&:hover {\\n\\t\\tbackground-color: #4caf50;\\n\\t\\tcolor: #fff;\\n\\t}\\n\\t&:active {\\n\\t\\ttransform: translateY(2px);\\n\\t}\\n\"])));\nvar StyledFileName = styled.span(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n\\tdisplay: block;\\n\\tfont-size: 1rem;\\n\\tmargin-bottom: 1rem;\\n\"])));\n\n/**\r\n * ImageUploader Success callback.\r\n *\r\n * @callback onFileSelectSuccess\r\n * @param {File} file - The image file.\r\n */\n\n/**\r\n * ImageUploader Error callback.\r\n *\r\n * @callback onFileSelectError\r\n * @param {object} error - Error Object.\r\n * @param {string} error.error - Error Message.\r\n */\n\n/**\r\n * ImageUploader\r\n * @param {object} props ImageUploader Props.\r\n * @param {onFileSelectSuccess} props.onFileSelectSuccess Success Handler.\r\n * @param {onFileSelectError} props.onFileSelectError The email of the user.\r\n */\n_c = StyledFileName;\nexport default function ImageUploader(_ref) {\n  _s();\n  var onFileSelectSuccess = _ref.onFileSelectSuccess,\n    onFileSelectError = _ref.onFileSelectError;\n  // MIME Types to allow for upload.\n  var supportedFiles = [\"application/pdf\", \"image/png\", \"image/jpeg\"];\n  // Splitting the end of the string to get the file extension is not the best way to do this.\n  // Will break for MIME's like SVG 'image/svg+xml'.\n  var supportedFileEnds = supportedFiles.map(function (file) {\n    return file.split(\"/\")[1];\n  }).join(\", \");\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    fileName = _useState2[0],\n    setFileName = _useState2[1];\n\n  /**\r\n   *\r\n   * @param {React.ChangeEvent<HTMLInputElement>} e\r\n   */\n  var handleFileInput = function handleFileInput(e) {\n    // Makes sure it's the correct file type.\n    var file = e.target.files[0];\n    if (supportedFiles.includes(file.type)) {\n      setFileName(file.name);\n      onFileSelectSuccess(file);\n    } else {\n      onFileSelectError({\n        error: \"File must be a PDF/Image\"\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"file-uploader\",\n    children: [/*#__PURE__*/_jsxDEV(StyledFileName, {\n      children: [fileName, fileName === \"\" && \"Supports: \".concat(supportedFileEnds)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        style: {},\n        type: \"file\",\n        onChange: handleFileInput,\n        accept: supportedFiles.join(\",\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this), \"Choose File\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 3\n  }, this);\n}\n_s(ImageUploader, \"qmgMVFP5VOwUOxztcZ5P9gagwnE=\");\n_c2 = ImageUploader;\nvar _c, _c2;\n$RefreshReg$(_c, \"StyledFileName\");\n$RefreshReg$(_c2, \"ImageUploader\");","map":{"version":3,"names":["React","useState","styled","jsxDEV","_jsxDEV","StyledFileUploader","label","_templateObject","_taggedTemplateLiteral","StyledFileName","span","_templateObject2","_c","ImageUploader","_ref","_s","onFileSelectSuccess","onFileSelectError","supportedFiles","supportedFileEnds","map","file","split","join","_useState","_useState2","_slicedToArray","fileName","setFileName","handleFileInput","e","target","files","includes","type","name","error","className","children","concat","_jsxFileName","lineNumber","columnNumber","style","onChange","accept","_c2","$RefreshReg$"],"sources":["C:/Shreyash/Projects/Coupon site/argon-dashboard-react-master/src/components/QrUploader/qrUploader.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledFileUploader = styled.label`\r\n\tdisplay: block;\r\n\tborder: 1px solid #4caf50;\r\n\tdisplay: inline-block;\r\n\tpadding: 0.5rem 1rem;\r\n\tfont-size: 1rem;\r\n\tcursor: pointer;\r\n\tcolor: #4caf50;\r\n\ttransition: all 0.3s ease-in-out;\r\n\t&:hover {\r\n\t\tbackground-color: #4caf50;\r\n\t\tcolor: #fff;\r\n\t}\r\n\t&:active {\r\n\t\ttransform: translateY(2px);\r\n\t}\r\n`;\r\n\r\nconst StyledFileName = styled.span`\r\n\tdisplay: block;\r\n\tfont-size: 1rem;\r\n\tmargin-bottom: 1rem;\r\n`;\r\n\r\n/**\r\n * ImageUploader Success callback.\r\n *\r\n * @callback onFileSelectSuccess\r\n * @param {File} file - The image file.\r\n */\r\n\r\n/**\r\n * ImageUploader Error callback.\r\n *\r\n * @callback onFileSelectError\r\n * @param {object} error - Error Object.\r\n * @param {string} error.error - Error Message.\r\n */\r\n\r\n/**\r\n * ImageUploader\r\n * @param {object} props ImageUploader Props.\r\n * @param {onFileSelectSuccess} props.onFileSelectSuccess Success Handler.\r\n * @param {onFileSelectError} props.onFileSelectError The email of the user.\r\n */\r\nexport default function ImageUploader({ onFileSelectSuccess, onFileSelectError }) {\r\n\t// MIME Types to allow for upload.\r\n\tconst supportedFiles = [\"application/pdf\", \"image/png\", \"image/jpeg\"];\r\n\t// Splitting the end of the string to get the file extension is not the best way to do this.\r\n\t// Will break for MIME's like SVG 'image/svg+xml'.\r\n\tconst supportedFileEnds = supportedFiles.map((file) => file.split(\"/\")[1]).join(\", \");\r\n\r\n\tconst [fileName, setFileName] = useState(\"\");\r\n\r\n\t/**\r\n\t *\r\n\t * @param {React.ChangeEvent<HTMLInputElement>} e\r\n\t */\r\n\tconst handleFileInput = (e) => {\r\n\t\t// Makes sure it's the correct file type.\r\n\t\tconst file = e.target.files[0];\r\n\t\tif (supportedFiles.includes(file.type)) {\r\n\t\t\tsetFileName(file.name);\r\n\t\t\tonFileSelectSuccess(file);\r\n\t\t} else {\r\n\t\t\tonFileSelectError({ error: \"File must be a PDF/Image\" });\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"file-uploader\">\r\n\t\t\t<StyledFileName>\r\n\t\t\t\t{fileName}\r\n\t\t\t\t{fileName === \"\" && `Supports: ${supportedFileEnds}`}\r\n\t\t\t</StyledFileName>\r\n\r\n\t\t\t<div>\r\n            <input\r\n\t\t\t\t\tstyle={{ }}\r\n\t\t\t\t\ttype=\"file\"\r\n\t\t\t\t\tonChange={handleFileInput}\r\n\t\t\t\t\taccept={supportedFiles.join(\",\")}\r\n\t\t\t\t/>\r\n\t\t\t\tChoose File\r\n\r\n            </div>\r\n\t\t\t\t\r\n\t\t</div>\r\n\t);\r\n}"],"mappings":";;;;;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAEvC,OAAOC,MAAM,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,IAAMC,kBAAkB,GAAGH,MAAM,CAACI,KAAK,CAAAC,eAAA,KAAAA,eAAA,GAAAC,sBAAA,sUAgBtC;AAED,IAAMC,cAAc,GAAGP,MAAM,CAACQ,IAAI,CAAAC,gBAAA,KAAAA,gBAAA,GAAAH,sBAAA,yEAIjC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AALAI,EAAA,GArBMH,cAAc;AA2BpB,eAAe,SAASI,aAAaA,CAAAC,IAAA,EAA6C;EAAAC,EAAA;EAAA,IAA1CC,mBAAmB,GAAAF,IAAA,CAAnBE,mBAAmB;IAAEC,iBAAiB,GAAAH,IAAA,CAAjBG,iBAAiB;EAC7E;EACA,IAAMC,cAAc,GAAG,CAAC,iBAAiB,EAAE,WAAW,EAAE,YAAY,CAAC;EACrE;EACA;EACA,IAAMC,iBAAiB,GAAGD,cAAc,CAACE,GAAG,CAAC,UAACC,IAAI;IAAA,OAAKA,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAAA,EAAC,CAACC,IAAI,CAAC,IAAI,CAAC;EAErF,IAAAC,SAAA,GAAgCvB,QAAQ,CAAC,EAAE,CAAC;IAAAwB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAArCG,QAAQ,GAAAF,UAAA;IAAEG,WAAW,GAAAH,UAAA;;EAE5B;AACD;AACA;AACA;EACC,IAAMI,eAAe,GAAG,SAAlBA,eAAeA,CAAIC,CAAC,EAAK;IAC9B;IACA,IAAMT,IAAI,GAAGS,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC9B,IAAId,cAAc,CAACe,QAAQ,CAACZ,IAAI,CAACa,IAAI,CAAC,EAAE;MACvCN,WAAW,CAACP,IAAI,CAACc,IAAI,CAAC;MACtBnB,mBAAmB,CAACK,IAAI,CAAC;IAC1B,CAAC,MAAM;MACNJ,iBAAiB,CAAC;QAAEmB,KAAK,EAAE;MAA2B,CAAC,CAAC;IACzD;EACD,CAAC;EAED,oBACChC,OAAA;IAAKiC,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC7BlC,OAAA,CAACK,cAAc;MAAA6B,QAAA,GACbX,QAAQ,EACRA,QAAQ,KAAK,EAAE,iBAAAY,MAAA,CAAiBpB,iBAAiB,CAAE;IAAA;MAAAQ,QAAA,EAAAa,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrC,CAAC,eAEjBtC,OAAA;MAAAkC,QAAA,gBACSlC,OAAA;QACPuC,KAAK,EAAE,CAAE,CAAE;QACXT,IAAI,EAAC,MAAM;QACXU,QAAQ,EAAEf,eAAgB;QAC1BgB,MAAM,EAAE3B,cAAc,CAACK,IAAI,CAAC,GAAG;MAAE;QAAAI,QAAA,EAAAa,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjC,CAAC,eAGM;IAAA;MAAAf,QAAA,EAAAa,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAf,QAAA,EAAAa,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEX,CAAC;AAER;AAAC3B,EAAA,CA5CuBF,aAAa;AAAAiC,GAAA,GAAbjC,aAAa;AAAA,IAAAD,EAAA,EAAAkC,GAAA;AAAAC,YAAA,CAAAnC,EAAA;AAAAmC,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}