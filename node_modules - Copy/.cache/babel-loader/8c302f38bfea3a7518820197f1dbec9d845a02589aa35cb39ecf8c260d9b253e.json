{"ast":null,"code":"import _slicedToArray from \"C:/Shreyash/Projects/Coupon site/argon-dashboard-react-master/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _jsxFileName = \"C:\\\\Shreyash\\\\Projects\\\\Coupon site\\\\argon-dashboard-react-master\\\\src\\\\components\\\\QrUploader\\\\qrUploader.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from \"react\";\nimport { Button } from \"reactstrap\";\nimport styled from \"styled-components\";\n\n/**\r\n * ImageUploader Success callback.\r\n *\r\n * @callback onFileSelectSuccess\r\n * @param {File} file - The image file.\r\n */\n\n/**\r\n * ImageUploader Error callback.\r\n *\r\n * @callback onFileSelectError\r\n * @param {object} error - Error Object.\r\n * @param {string} error.error - Error Message.\r\n */\n\n/**\r\n * ImageUploader\r\n * @param {object} props ImageUploader Props.\r\n * @param {onFileSelectSuccess} props.onFileSelectSuccess Success Handler.\r\n * @param {onFileSelectError} props.onFileSelectError The email of the user.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ImageUploader(_ref) {\n  _s();\n  var onFileSelectSuccess = _ref.onFileSelectSuccess,\n    onFileSelectError = _ref.onFileSelectError;\n  // MIME Types to allow for upload.\n  var supportedFiles = [\"application/pdf\", \"image/png\", \"image/jpeg\"];\n  // Splitting the end of the string to get the file extension is not the best way to do this.\n  // Will break for MIME's like SVG 'image/svg+xml'.\n  var supportedFileEnds = supportedFiles.map(function (file) {\n    return file.split(\"/\")[1];\n  }).join(\", \");\n  var inputRef = useRef(null);\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    fileName = _useState2[0],\n    setFileName = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isFileError = _useState4[0],\n    setIsFileError = _useState4[1];\n\n  /**\r\n   *\r\n   * @param {React.ChangeEvent<HTMLInputElement>} e\r\n   */\n  var handleFileInput = function handleFileInput(e) {\n    // Makes sure it's the correct file type.\n    var file = e.target.files[0];\n    console.log('file', file);\n    if (supportedFiles.includes(file === null || file === void 0 ? void 0 : file.type)) {\n      setFileName(file.name);\n      onFileSelectSuccess(file);\n      setIsFileError(false);\n    } else {\n      onFileSelectError({\n        error: \"File must be a PDF/Image\"\n      });\n      setIsFileError(true);\n    }\n  };\n  var handleClick = function handleClick() {\n    inputRef.current.click();\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"text-white\",\n      children: [fileName, fileName === \"\" && \"Supports: \".concat(supportedFileEnds)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleClick,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        style: {\n          display: \"none\"\n        },\n        type: \"file\",\n        onChange: handleFileInput,\n        accept: supportedFiles.join(\",\"),\n        ref: inputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 5\n      }, this), \"Upload\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n}\n_s(ImageUploader, \"znEtt5e0QPrjwg6tKGluyM6dWJo=\");\n_c = ImageUploader;\nvar _c;\n$RefreshReg$(_c, \"ImageUploader\");","map":{"version":3,"names":["React","useRef","useState","Button","styled","jsxDEV","_jsxDEV","Fragment","_Fragment","ImageUploader","_ref","_s","onFileSelectSuccess","onFileSelectError","supportedFiles","supportedFileEnds","map","file","split","join","inputRef","_useState","_useState2","_slicedToArray","fileName","setFileName","_useState3","_useState4","isFileError","setIsFileError","handleFileInput","e","target","files","console","log","includes","type","name","error","handleClick","current","click","children","className","concat","_jsxFileName","lineNumber","columnNumber","onClick","style","display","onChange","accept","ref","_c","$RefreshReg$"],"sources":["C:/Shreyash/Projects/Coupon site/argon-dashboard-react-master/src/components/QrUploader/qrUploader.jsx"],"sourcesContent":["import React, { useRef, useState } from \"react\";\r\nimport { Button } from \"reactstrap\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\n\r\n/**\r\n * ImageUploader Success callback.\r\n *\r\n * @callback onFileSelectSuccess\r\n * @param {File} file - The image file.\r\n */\r\n\r\n/**\r\n * ImageUploader Error callback.\r\n *\r\n * @callback onFileSelectError\r\n * @param {object} error - Error Object.\r\n * @param {string} error.error - Error Message.\r\n */\r\n\r\n/**\r\n * ImageUploader\r\n * @param {object} props ImageUploader Props.\r\n * @param {onFileSelectSuccess} props.onFileSelectSuccess Success Handler.\r\n * @param {onFileSelectError} props.onFileSelectError The email of the user.\r\n */\r\nexport default function ImageUploader({ onFileSelectSuccess, onFileSelectError }) {\r\n\t// MIME Types to allow for upload.\r\n\tconst supportedFiles = [\"application/pdf\", \"image/png\", \"image/jpeg\"];\r\n\t// Splitting the end of the string to get the file extension is not the best way to do this.\r\n\t// Will break for MIME's like SVG 'image/svg+xml'.\r\n\tconst supportedFileEnds = supportedFiles.map((file) => file.split(\"/\")[1]).join(\", \");\r\n\r\n    const inputRef = useRef(null)\r\n\r\n\tconst [fileName, setFileName] = useState(\"\");\r\n\tconst [isFileError, setIsFileError] = useState(false)\r\n\r\n\t/**\r\n\t *\r\n\t * @param {React.ChangeEvent<HTMLInputElement>} e\r\n\t */\r\n\tconst handleFileInput = (e) => {\r\n\t\t// Makes sure it's the correct file type.\r\n\t\tconst file = e.target.files[0];\r\n\t\tconsole.log('file',file)\r\n\t\tif (supportedFiles.includes(file?.type)) {\r\n\t\t\tsetFileName(file.name);\r\n\t\t\tonFileSelectSuccess(file);\r\n\t\t\tsetIsFileError(false)\r\n\t\t} else {\r\n\t\t\tonFileSelectError({ error: \"File must be a PDF/Image\" });\r\n\t\t\tsetIsFileError(true)\r\n\t\t}\r\n\t};\r\n\r\n    const handleClick = () => {\r\n        inputRef.current.click();\r\n    }\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h4 className=\"text-white\">\r\n\t\t\t\t{fileName}\r\n\t\t\t\t{fileName === \"\" && `Supports: ${supportedFileEnds}`}\r\n\t\t\t</h4>\r\n\r\n\t\t\t<Button onClick={handleClick}>\r\n\t\t\t\t<input\r\n\t\t\t\t\tstyle={{ display: \"none\" }}\r\n\t\t\t\t\ttype=\"file\"\r\n\t\t\t\t\tonChange={handleFileInput}\r\n\t\t\t\t\taccept={supportedFiles.join(\",\")}\r\n                    ref={inputRef}\r\n\t\t\t\t/>\r\n\t\t\t\t Upload\r\n                </Button>\r\n\t\t</>\r\n\t);\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}